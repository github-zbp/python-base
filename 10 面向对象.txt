面向对象编程

规定类首字母要大写。

类的定义,类首字母要大写：
class Turtle:
    #属性
	color="green"
	weight=10
	legs=4
	shell=True
	
	#方法
	def climb(self):
	    print("爬行中")
	
	def eat(self):
	    print("吃东西")
		
实例化对象
tt=Turtle()  #不用new关键字，pthyon没有这个关键字

调用方法
tt.climb()

type(Turtle) #得到"type"类型

self是什么，为什么在方法的参数中要传一个self
其实self相当于php中的$this

用对象调用某个方法，则这个方法在定义的时候必须要传self这个参数,否则对象无法调用这个方法，只能用类调用这个方法
但是如果是使用类直接调用这个方法，则这个方法定义时可以不传self，此时调用的时候:
类名.方法名()

如果这个方法定义时传了self，那么使用类直接调用这个方法时必须传入一个对象
A类，里面有个aa(self)方法

a=A()
A.aa()  #不行
A.aa(a) #才行

但是这样相当于
a.aa()
所以用类调用传了self的方法是没有什么意义的

所以其实定义方法时传入self就相当于是个非静态方法，没传就是个静态方法

如果还想传其他参数可以用，隔开继续传
如下：
class Person:
    def setName(self,name):
	    self.name=name    #相当于$this.name=name
	def sayName(self):
	    print("我叫做{0}!".format(self.name))

zbp=Person()
zbp.setName("张小沛")		
zbp.sayName()

在php中，定义一个属性，必须要先声明有哪些属性
但是在py中不用先声明，而是直接赋值，如上面的self.name=name
虽然pthyon可以不先声明属性，但是最好还是自己声明一下：
name = ""
再在之后的什么地方赋值。
这样这个类有些什么属性就可以一目了然。

还有php的属性要用修饰关键字声明，如private public protected
py则不用。

py允许在类之外，使用对象定义一个属性，不过这个属性就只有这个对象有，其他的由此类实例化出来的对象就没有这个属性：
class A:
	pass

a=A()
a.name="zbp"
print(a.name)


魔术方法：用__xxx___表示
__init__(self,p1,p2,...):
    xxx
构造方法，实例化对象的时候会自动调用

上面的那个类就可以改写为：
class Person:
    name=""

    def __init__(self,name):
        self.name=name

    def sayname(self):
        print(self.name)

zbp=Person("zbp")
zbp.sayname()

虽然没有private关键字，但是他还是可以定义私有变量
只要在属性名前添加__即可
__name=""
...
self.__name=name 


但是呢其实这个私有变量是可以在外部调用的
访问 _类名__属性名 就可以
例如：

class Person:
    __name="zbp"
	
zbp=Person()
print(zbp.name) #报错
print(zbp.__name) #报错
print(zbp._Person__name) #可以
		
所以说py的私有变量其实是伪私有		
	
构造方法只能返回None,不能返回其他类型

__new__() 这个魔术方法很少用，这个才是对象实例化所第一个调用的魔术方法而不是__init__

__del__(self) 析构方法
某对象的所有引用都被del之后，就会调用这个方法。
如：
class A:
    def __del__(self):
	    print("析构函数")

a1=A()
a2=a1 
a3=a2
del a1 #没输出
del a3 #没输出
del a2 #输出析构函数4字 	
	
算数魔术方法：
__add__(self,...) #对象相加时自动调用
__sub__(self,...) #...
__mul__(self,...)
__truediv__(self,..)
	
__repr__(self) #当调用对象时会调用，如
a=A()
a #调用
 
__str__(self) #当print对象是会调用

这两个方法都要返回字符串，否则报错

__getattr__(self,name) #当用户访问一个不存在的属性时

__getattribute__(self,name) #当用户访问类的一个属性时触发(在类内调用属性也会触发)，无论这个属性是否存在

PS：__getattribute__的触发会先于__getattr__
	
__setattr__(self,name,value)	#当设置一个属性时(无论是在类之内还是之外设置)触发，无论这个属性是否存在

__delattr__(self,name) #当干掉一个属性是触发

现在我有一个需求，Test类里面有一个属性是nickName
我的需求是，当我访问nickName属性是，要输出nickName属性后加上zbp这个字符

错误的写法：
	class Test:
		nickName="zbp"
		def __getattribute__(self,name):
			self.name+="abc"
			return self.name

	t=Test()
	print(t.nickName)
	
	错在两个地方：1.name是一个变量，里面放的是“nickName”字符串，但是你这里self.name+="abc"就变成了对name属性的操作，这就不对了，因为根本没有name属性
					2.self.name+="abc"相当于self.name=self.name+"zbp",这里就会访问到self.name这个变量，所以他又会取调用__getattribute__魔术方法，然后无限递归
					
正确写法：				
	class Test:
    nickName="zbp"
    def __getattribute__(self,name):
        newStr=super().__getattribute__(name)  #super().__getattribute__(name)返回nickName的值，super()是object对象，是所有对象的基类
        newStr+="abc"
        return newStr

t=Test()
print(t.nickName)

再来一个需求：现在有一个矩形类，这个类里面只有宽度和高度两个属性
如果用户在外面设置其他属性，假如这个属性是square(正方形)，那么就让宽和高相等
否则就正常的创建这个属性：
class Rectangle:
	width=0
	height=0
	
	def __init__(self,width,height):
		self.width=width 
		self.height=height
	
	def __setattr__(self,name,value):
		if(name=="square"):
			self.width=value 
			self.height=value 
		else :
			self.name=value 
			
r1=Rectangle(4,5)			#此时就会报错说无限递归，因为实例化的时候，就会对宽高赋值，就会调用setattr方法，执行self.name=value就无限递归
r1.square=10

解决方法：两种，一是将self.name=value改为：super().__setattr__(name,value)
				而是将self.name=value改为：self.__dict__[name]=value
设置类的__xxx__方法是不会触发setattr魔术方法的。
__dict__属性是一个字典，里面放着该类所有属性的键值对

描述符：(就是一个类)
就是将某种特殊类型的类（描述符）的实例指派给另一个类的属性
什么事特殊类型的类？
就是至少存在以下一个魔术方法的类：
__get__(self,instance,owner) 访问描述符对象时触发，要返回属性的值
__set__(self,instance,value) 在给描述符对象时触发，不返回任何内容
__delete__(self,instance)	删除描述符对象时触发，不返回任何内容

现在写一个描述符：
class MyDecriptor:
	def __get__(self,instance,owner):
		print("getting",self,instance,owner)
		
	def __set__(self,instance,value):
		print("getting",self,instance,value)
	
	def __delete__(self,instance)
		print("getting",self,instance)

class Test:
	x=MyDecriptor()
	
这里将描述符的类实例化赋给Test的属性

test=Test()
test.x  #触发描述符的__get__
它里面的self是描述符对象，即x
instance是test对象
owner是Test这个类

test.x="zbp"	#触发描述符的__set__
del test.x 		#触发描述符的__delete__ 

其实property()就是一个描述符

这里我们可以自己写一个描述符代替property的功能
class MyProperty:
	def __init__(self,getAttr=None,setAttr=None,delAttr=None):
		self.getAttr=getAttr	#这里传进来的这3个参数的内容是方法，就是要将3个方法赋给描述符的变量
		self.setAttr=setAttr	#这么一来，MyProperty的这3个属性就变成了可以调用的方法
		self.delAttr=delAttr 
		
	def __get__(self,instance,owner):
		return self.getAttr(instance)
		
	def __set__(self,instance,value):
		self.setAttr(instance,value)
		
	def __delete__(self,instance):
		self.delAttr(instance)
		
class A():
	__a=None #设置为私有的属性，必须调用方法来访问和设置该属性
	
	def getA(self):
		return self.__a
		
	def setA(self,value):
		self.__a=value
		
	def delA(self):
		del self.__a

	x=MyProperty(getA,setA,delA)	#将3个方法赋给描述符
	
定制容器：
什么是容器，就是能存放东西的变量，比如列表，字符串，字典，元组都是容器

如果希望定制的容器是不可变的话，只需定义__len__()和__getitem__()方法
如果是可变的，还要多定义__setitem__和__delitem__方法
__len__在len(对象)时触发
__getitem__在调用对象[key]时触发
__setitem__和__delitem__的触发以此类推

现在有一个需求，写一个自定义的列表，要求这个列表定义后不能改变，而且访问该列表的count属性能返回所有元素访问的次数
class MyList:
    def __init__(self,*args):
        self.list=list(args)
        self.len=len(self.list)
        #self.count={}.formkeys(range(self.len),0)    #这句话可以代替下面的for循环
        self.count={}
        a=0
        for i in self.list:
            self.count[a]=0
            a+=1

    def __len__(self):
        return self.len

    def __getitem__(self,key):
        if key<0 or key>self.len-1 :
            return ""
        self.count[key]+=1
        return self.list[key]	#不用担心这里会无限递归，self[key]才会无限递归

迭代器(迭代就是循环啦)
这里我要说一点：遍历列表，元组的时候，for i in xxx 中的i是序列的值
但是遍历字典的时候，for i in xxx中的i是字典的下标
xxx[i]	才是他的值

介绍两个bif:
iter()/next()
如
str1="zbp"
it=iter(str1)
next(it)	#z
next(it)	#b
next(it)	#p
next(it)	#报错

for其实就是使用iter()和next()实现的

迭代器是一个具有__iter__()/__next__()魔术方法的类

__iter__()/__next__()
当循环一个对象的时候，就会自动调用这两个方法，__iter__()没有什么内容，直接return self即可
__next__()是每循环一次就调用一次

class addCount:
	i=0
	r=0
	
	def __init__(self,s):	#s是目标值
		self.s=s
		
	def __iter__(self):
		return self
		
	def __next__(self):
		if(self.r>=self.s):
			raise StopIteration	#停止循环
		else :
			self.r+=self.i
			self.i+=1
			return self.r
			
>>> a=addCount(1000)
>>> for i in a:
		print(i)
继承

格式为：
class 子类名(父类名):

比如一个类继承list这个类
class Mylist(list)
    pass
	
pass表示这个类什么都不干,相当于一个空代码块

list1=Mylist()
list1.sort()

这么一来Mylist类也有list的方法了

如何调用父类的方法：
a. 父类类名.方法名(self,p1,p2,p3,...)  这里面的self就是子类的实例对象而非父类的实例对象了
b. super().方法名(p1,p2,...)  而且不用传self

而且py支持多继承
class 子类(父类1，父类2，父类3，...):

但是要尽量避免多继承。


组合

比如：有一个水池类，里面有乌龟和鱼
class WaterAnimal:
    num=0    #表示初始化多少只水生动物
    
	def __init__(self,num):
	    self.num=num
		
		
class Turtle(waterAnimal):
    pass
	
class Fish(waterAnimal):
    pass	
	
class Pool:
    fish=None
	turtle=None 
	
    def __init__(self,x,y):
	    self.fish=Fish(x)
		self.turtle=Turtle(y)
		
	def info(self):
	    print("水中有%s只乌龟和%s只鱼" % (self.fish.num,self.turtle.num))
		
pool=Pool(5，10)		
pool.info()

像这种将一个对象作为属性存在另一个对象中的做法就叫做组合

继承是纵向关系
组合是横向关系


类对象
所谓的类对象，就是不实例化类，而直接使用类来调用方法和属性
类中的所有方法和属性没有静态和非静态之分。比如说：

class C:
    count=0
	
	def addCount(self):
	    self.count++
		
a=C()
b=C()
c=C()

c.count=10
C.count=100    #这里直接使用类来调用修改属性

此时a.count和b.count都是100，但是c.count还是10

从上面例子可以看出，定义出来的属性既可以让对象调用，也可以用类调用
但是在php中只有静态属性才可以让类调用

还有，用类修改属性时不会改变用对象修改的属性值，但是对象未修改过属性值则会改变所有对象的属性值
所以用类来修改属性值相当于一种初始化的作用

但是，如果使用过类调用addCount方法则要传入对象作为参数
C.addCount(a)
此时a的count属性加1，其他对象的不变


还有 属性名不能和方法名重复，否则会属性会覆盖掉方法。这样这个方法就不存在了
你再去调用这个方法的时候就会报错
因此要遵循属性用名词命名，方法用动词命名


PS：如果
a=A()
del A   #干掉A这个类
a.aa()  #请问a对象还能不能调用aa()方法？

答案是可以的。



和类相关的BIF：
issubclass(类1，类2)    #判断类1是否是类2的子类，第二参如果放入元组，里面放入多个类，那么只要有一个类是类1的父类都算true

例如：
class A :
    pass 
	
class B(A) :
    pass 
	
issubclass(B,A)  #返回True
issubclass(B,B)  #返回True
issubclass(B,object) #返回True，object是所有类的基类


isinstance(对象，类) #判断对象是否是类的实例化对象,如果第一参不是个对象而是个类，就会返回false

isinstance(b,B)  #True
isinstance(b,A)  #True


hasattr(对像，属性)  #判断一个对象是否有某属性,第二参要加引号哦

getattr(对象,属性[,默认值]) #访问某个属性，不存在就可以赋值个默认值

setattr(对象,属性名,值)    #在类之外添加或者修改属性值

delattr(对象,属性名)  #干掉一个属性，不存在则报错

property() 作用是设置一个属性，用这个属性操作其他属性
例如：
class C:
    def __init__(self,size=10):
	    self.size=size 
		
	def getSize(self):
	    return self.size 
		
	def setSize(self,size):
	    self.size=size 
    
	def delSize(self):
	    del self.size 
		
	x=property(getSize,setSize,delSize)
	
c1=C()
print(c1.x)    #会执行getSize()
c1.x=20        #会执行setSize()
del c1.x       #会执行delSize()

那么这个方法有什么用？就是如果要改getSize/setSize/delSize的方法名时，就可以无需改应用层


如果你想重写一个类，重写里面的一个或者几个方法
你可以定义一个类，类名和你要重写的那个类同类名
然后让这个类继承自己：这么一来，你只要重写你要重写的方法，其他方法统统继承不变
class A(A):
    .....
	

	
现在要求做一个计时器的类：
有start和stop方法。
假设实例化出来的对象是t1,当调用t1或者print(t1)就显示计时时间
如果计时器没有启动或者已经停止，调用stop方法会提示
允许两个计时器相加，并返回两个计时器总计时时间

这里我们需要了解一些py的时间函数
先导入函数库
import time

time.time()  当前时间戳，保留到小数4位

time.localtime()  当前时间，格式是元组
返回值如下：
time.struct_time(tm_year=2018, tm_mon=8, tm_mday=28, tm_hour=14, tm_min=46, tm_sec=1, tm_wday=1, tm_yday=240, tm_isdst=0)

time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) 
根据元组格式化日期2016-03-20 11:45:39

获取日期的时间戳
time.mktime(元组)
传入的元组有九个元素(y,m,d,h,i,s,0,0,0)
比如：
time.mktime((2018,10,21,0,0,0,0,0,0))
或者
time.mktime(time.localtime()) time.localtime()返回值也是元组

根据字符串格式的时间获取到元组格式
time.strptime(str,format)
例如：
str是 2018-10-21 10:20:55
time.strptime(str,"%Y-%m-%d %H:%M:$S")

strptime配合mktime可以将字符串的时间变为时间戳

现在正式开始写这个类：

import time

class MyTimer:
    st=0
    et=0
    dt=0
    isStart=False

    def start(self):
        if self.checkErr("start") :
            self.st=time.time()
            self.isStart=True
            print("计时开始")

    def stop(self):
        if self.checkErr("stop") :
            self.et=time.time()
            self.dt=self.et-self.st
            self.isStart=False
            print("计时结束")

    def checkErr(self,type):
        if type=="start" and self.isStart :
            return False
        if type=="stop" and not self.isStart :
            return False
        return True
    
    def __str__(self):
        return "计时时间为："+str(self.dt)

    __repr__=__str__


    #def __repr__(self):
    #    return "计时时间是："+str(self.dt)

        


        
注意两点：
一个是你可能会定义一个start的属性，但是之前说过，属性名不可以和类中的方法名重复
否则调用起来会报错
而是你输出"计时时间是："+str(self.diff)时很容易少了str()将数字转为字符串，不同类型
的变量连接会报错


再做一个练习：定义一个温度类，两个描述符来描述摄氏度和华氏度两个属性
要求两个属性会自动转换。即给摄氏度赋值，再打印华氏度可以打印出来
公式为：摄氏度*1.8+32=华氏度

class Degree:
    def __init__(self,getAttr,setAttr,delAttr):
        self.getAttr=getAttr
        self.setAttr=setAttr
        self.delAttr=delAttr

    def __get__(self,instance,owner):
        return self.getAttr(instance)

    def __set__(self,instance,value):
        self.setAttr(instance,value)

    def __del__(self,instance):
        self.delAttr(instance)

class DegreeC(Degree):
    pass

class DegreeF(Degree):
    pass

class MyDegree:
    degreeC=0
    degreeF=32

    def getDegreeC(self):
        return self.degreeC

    def setDegreeC(self,value):
        self.degreeC=value
        self.degreeF=value*1.8+32

    def delDegreeC(self):
        del self.degreeC

    def getDegreeF(self):
        return self.degreeF

    def setDegreeF(self,value):
        self.degreeF=value
        self.degreeC=(value-32)/1.8

    def delDegreeF(self):
        del self.degreeF

    c=DegreeC(getDegreeC,setDegreeC,delDegreeC)
    f=DegreeF(getDegreeF,setDegreeF,delDegreeF)

	
	几乎全是重复代码。。。
	
	下面是作者的做法：
	
	class DegreeC:
    c=0

    def __get__(self,instance,owner):
        return self.c

    def __set__(self,instance,value):
        self.c=value

	class DegreeF:

		def __get__(self,instance,owner):
			return (instance.c*1.8)+32

		def __set__(self,instance,value):
			instance.c=(value-32)/1.8

	class MyDegree:
		c=DegreeC()
		f=DegreeF()

		他是这样的，真正的摄氏度属性是放在DegreeC类中的，没有定义华氏度的属性，而是用摄氏度属性通过计算表示华氏度
		a=MyDegree()
		
		当a.c和a.c=30时，调用DegreeC的方法
		当a.f和a.f=0时，会先调用DegreeF的方法，DegreeF中的方法有对MyDegree的属性进行操作，所以又调用了DegreeC的方法
		
		
生成器：和对象无关
生成器是一个含有yield的函数
生成器是一个特殊的迭代器

定义一个生成器：
def myGen():
	print("生成器被执行")
	yield 1
	yield 2

	#当执行到yield时就相当于return，就会停止执行。下次执行的时候就会去执行第二个yield
	
myG=myGen()
next(myG) -->得1
next(myG) -->得2

当然也可以循环：
for i in myGen():
	print(i)
	
得到1 2

生成器推导式：
(i的表达式 for i in xxx)
例如：
gen1=(i/2 for i in range(10))

然后你遍历gen1
for i in gen1:
     print(i)

0.0	 
0.5
1.0
1.5
2.0
2.5
3.0
3.5
4.0
4.5

你也可以用next
next(gen1)

生成器推导式还可以当作参数传入函数，比如
sum(i/2 for i in range(10))
22.5


