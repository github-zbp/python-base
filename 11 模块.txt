模块
模块就是py文件

导入一个模块
import 文件名
文件名中不含后缀
如果是自定义模块，那么这个模块要放在pthyon.exe同一目录下才行。

比如
import abc

如果要使用abc中的函数hello(),不可以直接
hello()

而是要这要调用：
abc.hello()

======================================
如果只想调用某一个模块的一个或者多个函数，可以这样
from abc import hello,hi
这里引入了abc的两个函数

还可以起别名：
import abcdefghij as aj
========================================

总结一下引入模块的3中方式：
1.import 模块名
2.from 模块名 import 函数/类
3.import 模块名 as 别名

========================================

if __name__ == '__main__'的作用：

是这样的，如果有一个模块叫做abc,有一个引入abc模块的文件叫做a
在abc文件中print(__name__)
那么当你运行abc.py的时候，会输出'__main__',表示这个文件是作为主模块在运行
而当你运行a文件的时候，print(__name__)会输出"abc"这个模块名,表示这个文件是作为被引用的模块在其他文件中运行

那么if __name__ == '__main__'的作用是，有时候，我们写好一个模块，想要测试里面的类或者函数，就可以在
这个模块中这样写，比如：
abc.py :
def hello():
    print("hello!")
	
if __name__=='__main__' :   #用于测试
    hello()
	
那么直接运行abc.py,他就会运行hello()函数来测试这个函数是否管用
而在a.py中，这段测试代码就不会运行

============================================
搜索路径：
pthyon导入模块的时候，会从一个特定的搜索路径中找是否存在这个模块文件
而这个搜索路径是一个列表，他存在sys.path中。
我们查看一下sys.path：
>>> import sys
>>> sys.path

也就是说，你将文件放在sys.path指定的目录中都可以直接import到


你也可以自定义添加搜索路径：
sys.path.append(r"C:\桌面的路径")
这样你就可以import引入你桌面的python文件
=============================================
包(package)：
一个包就是专门用来存放自定义模块的自定义的目录
创建一个包，如下：
1.创建一个目录，目录名就是包名；
2.在该目录中创建一个__init__.py,这个文件可以为空（必须创建）
3.在这个目录中放模块即可

第二步创建一个__init__.py是为了告诉pthyon这个目录是一个包

如何引入包里面的模块：
假如有一个包是m1,在a.py中我要引入这个包中的abc模块，此时a.py和m1要在同一个目录
import m1.abc

abc.hello()
即可 
或者 
from m1.abc import hello 
hello()

若m1和a.py不在同一个目录，则要使用sys.path.append()添加搜索路径再引入

