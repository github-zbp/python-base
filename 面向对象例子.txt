
class C:
    def __getattr__(self,name):
        print(1)
       

    def __getattribute__(self,name):
        print(2)

    def __setattr__(self,name,value):
        print(3)

c=C()
c.x=1	#1.这里会显示什么
print(c.x)	#2.这里会显示什么

1处会显示3
2处会显示2和None，因为1处已经定义了x属性，所以x属性是存在的，所以不会调用__getattr__,所以不会输出1
但是会调用__getattribute__，所以显示2
print(c.x)按理说会显示1，但是由于我们重写了__getattribute__方法，令他没有返回值，所以print(c.x)就返回了None


class C:
    def __getattr__(self,name):
        print(1)
        return super().__getattr__(name)

    def __getattribute__(self,name):
        print(2)
        return super().__getattribute__(name)

c=C()
c.x

结果输出 
2 
1
Traceback (most recent call last):
  File "C:/Users/Administrator/Desktop/test1.py", line 11, in <module>
    c.x
  File "C:/Users/Administrator/Desktop/test1.py", line 4, in __getattr__
    return super().__getattr__(name)
AttributeError: 'super' object has no attribute '__getattr__'

首先访问了一个不存在的属性x，所以调用__getattribute__，输出2
然后返回super().__getattribute__(name)，这句话相当于又访问了x这个不存在的属性
所以调用__getattr__，输出1
并且调用父类的__getattr__，但是他会报错说父类没有这个方法
可以求证一下
dir(object)
是真的没有__getattr__方法



class Counter:
    def __init__(self):
        self.counter=0
    def __setattr__(self,name,value):
        self.counter+=1
        super().__setattr__(name,value)
    def __delattr__(self,name):
        self.counter-=1
        super().__delattr__(name)

这个对象一实例化就会报错：
首先构造函数对counter属性赋值会调用__setattr__
__setattr__执行self.counter+=1,即self.counter=self.counter+1
这句话就访问了counter属性，但是这个时候counter还没有定义，所以会报错说 
counter没有定义
要执行了super().__setattr__(name,value)，counter才定义了

如果改为
    def __setattr__(self,name,value):
        super().__setattr__(name,value)
        self.counter+=1
就不会报counter没有定义错误，但是会报无限递归错误

#请实现功能，定义一个类，当访问一个不存在的属性时，不报错且提示该属性不存在
class C:
    def __getattr__(self,name):
        print("该属性不存在")


改写前面的Counter类，使得他不会报错，并且，能记录该类实例化出的对象有多少个属性，也就是说
当这个对象在类外创建一个属性就令counter属性+1，干掉一个属性就令他-1
class Counter:
    def __init__(self):
        self.counter=1
    def __setattr__(self,name,value):
        if not hasattr(self,name) :
            if name=="counter" :
                super().__setattr__("counter",1)
            else :
                super().__setattr__("counter",self.counter+1)
        super().__setattr__(name,value)
        
            
    def __delattr__(self,name):
        super().__setattr__("counter",self.counter-1)
        super().__delattr__(name)

或者这样：

class Counter :
	def __init__(self):
		super().__setattr__("counter",1)
	
	def __setattr__(self,name,value):
		if name=="counter" :
			return False
		super().__setattr__("counter",self.counter+1)
		super().__setattr__(name,value)
		
	def __delattr__(self,name):
		if name=="counter" :
				return False
		super().__setattr__("counter",self.counter-1)
		super().__delattr__(name)
	
这里做了一个预防机制，防止在类之外对counter属性修改和删除
当然，不能将counter设为私有属性，否则counter就不能再外面访问了
counter要可以在外面访问，不能再外面被干掉和修改

关于描述符
class MyDes:
    def __init__(self,value=None):
        self.val=value
        
    def __get__(self,instance,owner):
        return self.val**2

    def __set__(self,instance,value):
        self.val=value+10
        print(self.val)
        


class Test:
    def __init__(self):
        self.x=MyDes(3)
    #x=MyDes(3)

test=Test()
test.x

结果不会输出9，而是输出<__main__.MyDes object at 0x01EA9070>
就是输出这个描述符对象本身。

原因是，描述符对象不能赋值给Test对象的属性x,只能赋值给Test类的属性x
x=MyDes(3)就是类属性
self.x=MyDes(3)是对象的属性
 

请写一个描述符，使得：

class Test:
    x=MyDes(10,"x")

test=Test()

>>> y=test.x
正在获取变量：x
>>> y
10
>>> test.x=8
正在修改变量：x
>>> del test.x
该变量无法删除！
>>> test.x
正在获取变量：x
8

答案：
class MyDes:
    def __init__(self,value=None,name="x"):
        self.name=name
        self.val=value
        
    def __get__(self,instance,owner):
        print("正在获取变量："+self.name)
        return self.val

    def __set__(self,instance,value):
        print("正在修改变量："+self.name)
        self.val=value

    def __delete__(self,instance):
        print("该变量无法删除！")
		
		
请写一个描述符Record,记录指定变量的读取和写入操作，并将记录和触发时间保存到文件record.txt
class Test:
    x=Record(10,"x")
    y=Record(8.8,"y")
	
>>> test=Test()
>>> test.x
10
>>> test.y
8.8
>>> test.x=123
>>> test.x=1.23
>>> test.y="hello"

答案：
import time

class Record:
    def __init__(self,value,name):
        self.value=value
        self.name=name
        self.f=None
        self.time=""

    def __get__(self,instance,owner):
        info="时间："+self.time+"\n获取变量:"+self.name+"\t值为"+str(self.value)+"\n\n"
        self.record(info)
        return self.value

    def __set__(self,instance,value):
        info="时间："+self.time+"\n设置变量:"+self.name+"\t值为"+str(value)+"\n\n"
        self.record(info)
        self.value=value

    def record(self,info):
        self.f=open("record.txt","a+")
        self.f.write(info)
        self.f.close()
    
    def __getattribute__(self,name):
        if(name=="time"):	#这样做的好处是，每访问一次time属性是就可以自动更新时间
            timeStr=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
            return timeStr
        else :
            return super().__getattribute__(name)
        

请写出一个类用于指定一个列表，要求记录列表中每个元素被访问的次数
要求1：实现获取、设置和删除一个元素的行为（删除一个元素的时候对应的计数器的那个元素也会被删除）
要求2：增加counter(index)方法，返回index参数所指定的元素记录的访问次数
要求3：实现append()/pop()/remove()/insert()/clear()和reverse()方法

class L:
    def __init__(self,*args):
        self.list=list(args)
        self.len=len(self.list)
        self.counts=[0 for i in range(self.len)]

    def __getitem__(self,key):
        self.counts[key]+=1
        return self.list[key]

    def __setitem__(self,key,value):
        self.list[key]=value

    def __delitem__(self,key):
        del self.counts[key]
        del self.list[key]

    def counter(self,key):
        print(self.counts[key])

    def append(self,value):
        self.counts.append(0)
        self.list.append(value)

    def pop(self):
        self.counts.pop()
        self.list.pop()

    def remove(self,value):
        index=self.list.index(value)
        self.list.remove(value)
        del self.counts[index]
    
    def __repr__(self):
        return str(self.list)

    __str__=__repr__

	
	这里有一个误区，就是存每个元素的访问次数使用字典存，这样会产生很多不必要的麻烦，尤其是当你
	删除一个列表元素时
	
	写一个迭代器要求写出至今的闰年
	import time

	class LeapYear:
		def __init__(self):
			#获取今年是多少年
			self.ty=int(time.strftime("%Y",time.localtime()))

			#开始的年份
			self.y=0
		
		def __iter__(self):
			return self

		def __next__(self):
			if self.y<=self.ty :
				 y=self.y
				 self.y+=4
				 type(y)
				 return y
			else :
				raise StopIteration		#这个else不能没有，否则会一直循环下去的，除非你在外面的for循环中break掉这里就可以不加raise StopIteration
				
	
	>>> ly=LeapYear()
	>>> for i in ly:
		if i>2000:
			print(i)
			
	用while代替下面的for：
	for each in range(5):
		print(each)
		
	答案：
	it=iter(range(5))
	while True:
		try :
			print(next(it))
		except StopIteration:
			break

			
	自己写一个reverse()的类MyRev:
	要求：
	str1=MyRev("abcd")
	for i in str1:
		print(i,end='')
		
	答案：

	class MyRev:
		def __init__(self,var):
			self.var=var
			self.index=len(self.var)-1

		def __iter__(self):
			return self

		def __next__(self):
			if self.index>=0:
				attr=self.var[self.index]
				self.index-=1
				return attr
			else :
				raise StopIteration

写一个和reversed()相同的功能的生成器
要求：
for i in MyRev("abcde"):
	print(i,end="")				

得到 edcba

答案： 
def MyRev(str1):
    pos=len(str1)-1
    while pos>=0 :
        yield str1[pos]
        pos-=1
        